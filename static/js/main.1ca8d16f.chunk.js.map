{"version":3,"sources":["components/slate/utilities.js","components/slate/marks.js","components/app/app.js","index.js"],"names":["MarkHotkey","options","type","key","onKeyDown","event","editor","next","ctrlKey","preventDefault","toggleMark","CodeMark","_ref","children","react_default","a","createElement","BoldMark","_ref2","ItalicMark","_ref3","UnderlineMark","_ref4","StrikethroughMark","_ref5","plugins","App","state","isDebugging","editors","id","shortId","generate","value","Value","fromJSON","initialValue","handleChange","props","mappedEditors","_this","map","Object","objectSpread","setState","handleKeyDown","isCode","blocks","some","block","setBlocks","handleAddingEditor","e","prevState","concat","toConsumableArray","handleRemovingEditor","editorId","target","alert","filter","onDragStart","index","draggedItem","dataTransfer","effectAllowed","setData","parentNode","setDragImage","onDragOver","draggedOverItem","item","splice","renderMark","mark","marks_CodeMark","marks_BoldMark","marks_ItalicMark","marks_UnderlineMark","marks_StrikethroughMark","_this2","this","className","onClick","idx","draggable","onDragEnd","slate_react_es","placeholder","onChange","change","disabled","JSON","stringify","packageJson","version","React","Component","ReactDOM","render","app_app","document","getElementById"],"mappings":"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","file":"static/js/main.1ca8d16f.chunk.js","sourcesContent":["export const MarkHotkey = (options) => {\n  const { type, key } = options;\n\n  // Return our \"plugin\" object, container the `onKeyDown` handler.\n  return {\n    onKeyDown(event, editor, next) {\n      // If it doesn't match our `key`, let other plugins handle it.\n      if (!event.ctrlKey || event.key !== key) return next();\n\n      // Prevent the default chars from being inserted.\n      event.preventDefault();\n\n      // Toggle the mark `type`.\n      editor.toggleMark(type);\n    },\n  };\n};\n","import React from \"react\";\n\nexport const CodeMark = ({ children }) => <code>{children}</code>;\nexport const BoldMark = ({ children }) => <strong>{children}</strong>;\nexport const ItalicMark = ({ children }) => <em>{children}</em>;\nexport const UnderlineMark = ({ children }) => <u>{children}</u>;\nexport const StrikethroughMark = ({ children }) => <del>{children}</del>;\n","import React from \"react\";\nimport { Editor } from \"slate-react\";\nimport { Value } from \"slate\";\nimport shortId from \"shortid\";\nimport initialValue from \"../slate/initial-value.json\";\nimport { MarkHotkey } from \"../slate/utilities\";\nimport { CodeMark, BoldMark, ItalicMark, UnderlineMark, StrikethroughMark } from \"../slate/marks\";\nimport packageJson from \"../../../package.json\";\n\nconst plugins = [\n  MarkHotkey({ type: \"bold\", key: \"b\" }),\n  MarkHotkey({ type: \"italic\", key: \"i\" }),\n  MarkHotkey({ type: \"underline\", key: \"u\" }),\n  MarkHotkey({ type: \"strikethrough\", key: \"s\" }),\n  MarkHotkey({ type: \"code\", key: \"`\" }),\n];\n\nclass App extends React.Component {\n  state = {\n    isDebugging: false,\n    editors: [\n      {\n        id: shortId.generate(),\n        value: Value.fromJSON(initialValue),\n      },\n    ],\n  };\n\n  handleChange = (props, id) => {\n    const mappedEditors = this.state.editors.map((editor) => {\n      if (editor.id === id) {\n        editor = { ...editor, value: props.value };\n      }\n      return editor;\n    });\n\n    this.setState({\n      editors: mappedEditors,\n    });\n  };\n\n  handleKeyDown = (event, editor, next) => {\n    if (!event.ctrlKey) return next();\n    switch (event.key) {\n      case \"b\": {\n        event.preventDefault();\n        editor.toggleMark(\"bold\");\n        break;\n      }\n      case \"i\": {\n        event.preventDefault();\n        editor.toggleMark(\"italic\");\n        break;\n      }\n      case \"`\": {\n        const isCode = editor.value.blocks.some((block) => block.type === \"code\");\n        event.preventDefault();\n        editor.setBlocks(isCode ? \"paragraph\" : \"code\");\n        break;\n      }\n      default: {\n        return next();\n      }\n    }\n  };\n\n  handleAddingEditor = (e) => {\n    e.preventDefault();\n    this.setState((prevState) => ({\n      editors: [\n        ...prevState.editors,\n        {\n          id: shortId.generate(),\n          value: Value.fromJSON(initialValue),\n        },\n      ],\n    }));\n  };\n\n  handleRemovingEditor = (e) => {\n    e.preventDefault();\n    const { editors } = this.state;\n    const editorId = e.target.value;\n    alert(`Are you sure you want to remove editor ${editorId}?`);\n    this.setState({\n      editors: editors.filter((editor) => editor.id !== editorId),\n    });\n  };\n\n  onDragStart = (e, index) => {\n    this.draggedItem = this.state.editors[index];\n    e.dataTransfer.effectAllowed = \"move\";\n    e.dataTransfer.setData(\"text/html\", e.target.parentNode);\n    e.dataTransfer.setDragImage(e.target.parentNode, 20, 20);\n  };\n\n  onDragOver = (index) => {\n    const draggedOverItem = this.state.editors[index];\n\n    // if the item is dragged over itself, ignore\n    if (this.draggedItem === draggedOverItem) {\n      return;\n    }\n\n    // filter out the currently dragged item\n    let editors = this.state.editors.filter((item) => item !== this.draggedItem);\n\n    // add the dragged item after the dragged over item\n    editors.splice(index, 0, this.draggedItem);\n\n    this.setState({ editors });\n  };\n\n  isDebugging = () => {\n    this.setState({\n      isDebugging: !this.state.isDebugging,\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"app\">\n        <div className=\"container\">\n          <header className=\"header\">\n            <button onClick={this.handleAddingEditor} className=\"btn addEditorBtn\">\n              Add unit\n            </button>\n          </header>\n          <div className=\"editorsContainer\">\n            {this.state.editors.map((editor, idx) => (\n              <div\n                key={editor.id}\n                className=\"editorContainer\"\n                onDragOver={() => this.onDragOver(idx)}>\n                <div\n                  className=\"editorDragHandle\"\n                  draggable={true}\n                  onDragStart={(e) => this.onDragStart(e, idx)}\n                  onDragEnd={this.onDragEnd}\n                />\n                <div className=\"editorInternal\">\n                  <Editor\n                    value={editor.value}\n                    plugins={plugins}\n                    placeholder={\"Type something...\"}\n                    onChange={(change, id) => this.handleChange(change, editor.id)}\n                    renderMark={this.renderMark}\n                  />\n\n                  <div className=\"editorContainerMeta flex\">\n                    <div>\n                      <code>editor id: {editor.id}</code>\n                    </div>\n                    <div className=\"editorContainerMetaActions\">\n                      <button\n                        className=\"btn addEditorBtn metaEditorBtn\"\n                        disabled\n                        onClick={() => alert(`Nested editors will be wired up soon!`)}>\n                        Add unit\n                      </button>\n                      <button\n                        onClick={this.handleRemovingEditor}\n                        className=\"btn removeEditorBtn metaEditorBtn\"\n                        value={editor.id}>\n                        Remove unit\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n\n          {this.state.isDebugging && (\n            <div className=\"detailsComponent\">\n              <details>\n                <summary>\n                  <code>application state</code>\n                </summary>\n                <pre>\n                  <code>{JSON.stringify(this.state, null, 2)}</code>\n                </pre>\n              </details>\n            </div>\n          )}\n        </div>\n\n        <div className=\"topBar\">\n          <code>\n            <strong>Prototype:</strong> Testing unit creation\n          </code>\n          <div>\n            <code className=\"versionNumber\">\n              <strong>Version:</strong> {packageJson.version}\n            </code>\n            <button className=\"btn debugBtn\" onClick={this.isDebugging}>\n              Debug\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  renderMark = (props, editor, next) => {\n    switch (props.mark.type) {\n      case \"code\":\n        return <CodeMark {...props} />;\n      case \"bold\":\n        return <BoldMark {...props} />;\n      case \"italic\":\n        return <ItalicMark {...props} />;\n      case \"underline\":\n        return <UnderlineMark {...props} />;\n      case \"strikethrough\":\n        return <StrikethroughMark {...props} />;\n      default:\n        return next();\n    }\n  };\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/app\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}